.TH "lib/tree.h" 3 "Wed Nov 16 2022" "greenland" \" -*- nroff -*-
.ad l
.nh
.SH NAME
lib/tree.h
.SH SYNOPSIS
.br
.PP
\fC#include <stdint\&.h>\fP
.br
\fC#include 'tree_state\&.h'\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBTree\fP"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef struct \fBTree\fP \fBTree\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "struct \fBTree\fP * \fBtree_create\fP (const char *sp, \fBtree_state\fP st, unsigned long d)"
.br
.ti -1c
.RI "void \fBtree_free\fP (\fBTree\fP *t)"
.br
.ti -1c
.RI "char * \fBtree_get_species\fP (const \fBTree\fP *t)"
.br
.ti -1c
.RI "\fBtree_state\fP \fBtree_get_status\fP (const \fBTree\fP *t)"
.br
.ti -1c
.RI "unsigned long \fBtree_get_days_alived\fP (const \fBTree\fP *t)"
.br
.ti -1c
.RI "void \fBtree_set_species\fP (\fBTree\fP *t, const char *sp)"
.br
.ti -1c
.RI "void \fBtree_set_status\fP (\fBTree\fP *t, \fBtree_state\fP st)"
.br
.ti -1c
.RI "void \fBtree_set_days_alived\fP (\fBTree\fP *t, unsigned long d)"
.br
.in -1c
.SH "Detailed Description"
.PP 

.PP
\fBDate\fP
.RS 4
2022-11-11 23:27:54 PM +0800 
.RE
.PP

.PP
Definition in file \fBtree\&.h\fP\&.
.SH "Typedef Documentation"
.PP 
.SS "typedef struct \fBTree\fP \fBTree\fP"
\fBTree\fP data class that stores information about a tree including its species, its status, and the amount of days it has lived\&. 
.SH "Function Documentation"
.PP 
.SS "struct \fBTree\fP * tree_create (const char * sp, \fBtree_state\fP st, unsigned long d)"
Create a \fBTree\fP data class
.PP
\fBParameters\fP
.RS 4
\fIsp\fP A string specifies the species name for the \fBTree\fP 
.br
\fIst\fP A \fBTree\fP State enum specifies the current status for the \fBTree\fP 
.br
\fId\fP A non-negative integer specifies the days alived of the \fBTree\fP
.RE
.PP
\fBReturns\fP
.RS 4
A \fBTree\fP data class that contains the information about its species name, current status and the amount of days alived\&.
.RE
.PP
\fBAttention\fP
.RS 4
st must be valid 
.RE
.PP

.PP
Definition at line \fB7\fP of file \fBtree\&.c\fP\&.
.PP
.nf
8 {
9   Tree* new_tree = malloc(sizeof(Tree));
10   assert(trstat_is_valid(st));
11   new_tree->species = NULL;
12   tree_set_species(new_tree, sp);
13   tree_set_status(new_tree, st);
14   tree_set_days_alived(new_tree, d);
15 
16   return new_tree;
17 }
.fi
.PP
References \fBTree::species\fP\&.
.SS "void tree_free (\fBTree\fP * t)"
Destroy a \fBTree\fP data class
.PP
\fBParameters\fP
.RS 4
\fIt\fP A tree data class to be destroyed 
.RE
.PP

.PP
Definition at line \fB19\fP of file \fBtree\&.c\fP\&.
.PP
.nf
20 {
21   free(t->species);
22   free(t);
23 }
.fi
.PP
References \fBTree::species\fP\&.
.SS "unsigned long tree_get_days_alived (const \fBTree\fP * t)"
Get \fBTree\fP's the amount of days it has lived
.PP
\fBParameters\fP
.RS 4
\fIt\fP A pointer to a \fBTree\fP
.RE
.PP
\fBReturns\fP
.RS 4
A non-negative integer of days the \fBTree\fP has lived 
.RE
.PP

.PP
Definition at line \fB35\fP of file \fBtree\&.c\fP\&.
.PP
.nf
36 {
37   return t->days_alived;
38 }
.fi
.PP
References \fBTree::days_alived\fP\&.
.SS "char * tree_get_species (const \fBTree\fP * t)"
Get \fBTree\fP's species name
.PP
\fBParameters\fP
.RS 4
\fIt\fP A pointer to a \fBTree\fP
.RE
.PP
\fBReturns\fP
.RS 4
A string that describes the \fBTree\fP's species name 
.RE
.PP

.PP
Definition at line \fB25\fP of file \fBtree\&.c\fP\&.
.PP
.nf
26 {
27   return t->species;
28 }
.fi
.PP
References \fBTree::species\fP\&.
.SS "\fBtree_state\fP tree_get_status (const \fBTree\fP * t)"
Get \fBTree\fP's current status
.PP
\fBParameters\fP
.RS 4
\fIt\fP A pointer to a \fBTree\fP
.RE
.PP
\fBReturns\fP
.RS 4
A non-negative integer indicates the \fBTree\fP's current status 
.RE
.PP

.PP
Definition at line \fB30\fP of file \fBtree\&.c\fP\&.
.PP
.nf
31 {
32   return t->status;
33 }
.fi
.PP
References \fBTree::status\fP\&.
.SS "void tree_set_days_alived (\fBTree\fP * t, unsigned long d)"
Set \fBTree\fP's the amount of days it has lived
.PP
\fBParameters\fP
.RS 4
\fIt\fP A modified \fBTree\fP with changed days of lived 
.br
\fId\fP A non-negative integer indicates day(s) 
.RE
.PP

.PP
Definition at line \fB55\fP of file \fBtree\&.c\fP\&.
.PP
.nf
56 {
57   if (tree_get_status(t) == DEAD) {
58     t->days_alived = 0;
59   } else {
60     t->days_alived = d;
61   }
62 }
.fi
.PP
References \fBTree::days_alived\fP\&.
.SS "void tree_set_species (\fBTree\fP * t, const char * sp)"
Set \fBTree\fP's species name
.PP
\fBParameters\fP
.RS 4
\fIt\fP A modified \fBTree\fP with changed species name 
.br
\fIsp\fP A string indicates a species name 
.RE
.PP

.PP
Definition at line \fB40\fP of file \fBtree\&.c\fP\&.
.PP
.nf
41 {
42   if (t->species) {
43     free(t->species);
44   }
45 
46   t->species = calloc(strlen(sp) + 1, sizeof(char));
47   strncpy(t->species, sp, strlen(sp) + 1);
48 }
.fi
.PP
References \fBTree::species\fP\&.
.SS "void tree_set_status (\fBTree\fP * t, \fBtree_state\fP st)"
Set \fBTree\fP's current status
.PP
\fBParameters\fP
.RS 4
\fIt\fP A modified \fBTree\fP with changed status 
.br
\fIst\fP A \fBTree\fP State enum 
.RE
.PP

.PP
Definition at line \fB50\fP of file \fBtree\&.c\fP\&.
.PP
.nf
51 {
52   t->status = st;
53 }
.fi
.PP
References \fBTree::status\fP\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for greenland from the source code\&.
